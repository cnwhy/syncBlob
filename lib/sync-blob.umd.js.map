{"version":3,"file":"sync-blob.umd.js","sources":["../src/index.ts"],"sourcesContent":["const fixLatin1: <T = string | number>(v: T) => T = (() => {\n  const offset = 128;\n  const u8 = new Uint8Array(256 - offset);\n  u8.forEach((v, i) => (u8[i] = i + offset));\n  const decode = new TextDecoder(\"ISO-8859-1\");\n  const str = decode.decode(u8);\n  const map = new Map();\n  u8.forEach((v, i) => {\n    const code = str.charCodeAt(i);\n    const s = str.charAt(i);\n    if (v !== code) {\n      map.set(code, v); // code 映射\n      map.set(s, String.fromCharCode(v)); // 字符映射\n    }\n  });\n  if (!map.size) return (v) => v;\n  return (v) => (map.has(v) ? map.get(v) : v);\n})();\n\nconst syncReadBlob = (blob: Blob, charset = \"ISO-8859-1\") => {\n  const url = globalThis.URL.createObjectURL(blob);\n  const req = new XMLHttpRequest();\n  req.open(\"GET\", url, false);\n  req.overrideMimeType(`text/plain;charset=${charset}`);\n  req.send(null);\n  globalThis.URL.revokeObjectURL(url)\n  return req.response as string;\n};\n\n/**\n * Blob对像转为字符串\n * @param blob \n * @param charset 字符编码，默认取blob.type中的字符编码信息或utf-8\n * @returns \n */\nexport const blob2String = (blob: Blob, charset?:string) => {\n  if(!charset){\n    const match = blob.type?.match(/;[\\W]*charset=(.+)$/)\n    charset = match?.[1] ?? 'ISO-8859-1';\n  }\n  const str = syncReadBlob(blob, charset);\n  const lint1Names = [\"ISO-8859-1\", \"LATIN-1\", \"LATIN1\"];\n  if (lint1Names.includes(charset.toLocaleUpperCase())) {\n    return Array.from(str, (s) => fixLatin1(s)).join(\"\");\n  }\n  return str;\n};\n\nexport const blob2buffer = (blob: Blob) => {\n  const str = syncReadBlob(blob);\n  const u8 = Uint8Array.from(str, (v) => fixLatin1(v.charCodeAt(0)));\n  return u8.buffer;\n};\n\nexport const blob2Base64 = (blob: Blob) => {\n  const str = syncReadBlob(blob);\n  const max = str.length;\n  const block = 1024 * 500; // 每次转换的大小\n  let offset = 0;\n  let base64 = [] as string[];\n  do {\n    base64.push(\n      btoa(Array.from(str.substring(offset, offset + block), (v) => fixLatin1(v)).join(\"\"))\n    );\n    offset += block;\n  } while (offset < max);\n  return base64.join(\"\");\n};\n\n// TODO 后续添加\n// export const blob2dataUrl = (blob: Blob) => {\n// };\n\nexport default {\n  blob2String,\n  blob2buffer,\n  blob2Base64,\n};\n"],"names":[],"mappings":";;;;AAAA,QAAM,aAA+C,MAAM;AACzD,UAAM,SAAS;AACf,UAAM,KAAK,IAAI,WAAW,MAAM,MAAM;AACtC,OAAG,QAAQ,CAAC,GAAG,MAAO,GAAG,CAAC,IAAI,IAAI,MAAO;AACzC,UAAM,SAAS,IAAI,YAAY,YAAY;AAC3C,UAAM,MAAM,OAAO,OAAO,EAAE;AAC5B,UAAM,0BAAU,IAAA;AAChB,OAAG,QAAQ,CAAC,GAAG,MAAM;AACnB,YAAM,OAAO,IAAI,WAAW,CAAC;AAC7B,YAAM,IAAI,IAAI,OAAO,CAAC;AACtB,UAAI,MAAM,MAAM;AACd,YAAI,IAAI,MAAM,CAAC;AACf,YAAI,IAAI,GAAG,OAAO,aAAa,CAAC,CAAC;AAAA,MAAA;AAAA,IACnC,CACD;AACD,QAAI,CAAC,IAAI,KAAM,QAAO,CAAC,MAAM;AAC7B,WAAO,CAAC,MAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI;AAAA,EAC3C,GAAA;AAEA,QAAM,eAAe,CAAC,MAAY,UAAU,iBAAiB;AAC3D,UAAM,MAAM,WAAW,IAAI,gBAAgB,IAAI;AAC/C,UAAM,MAAM,IAAI,eAAA;AAChB,QAAI,KAAK,OAAO,KAAK,KAAK;AAC1B,QAAI,iBAAiB,sBAAsB,OAAO,EAAE;AACpD,QAAI,KAAK,IAAI;AACb,eAAW,IAAI,gBAAgB,GAAG;AAClC,WAAO,IAAI;AAAA,EACb;AAQO,QAAM,cAAc,CAAC,MAAY,YAAoB;;AAC1D,QAAG,CAAC,SAAQ;AACV,YAAM,SAAQ,UAAK,SAAL,mBAAW,MAAM;AAC/B,iBAAU,oCAAQ,OAAR,YAAc;AAAA,IAAA;AAE1B,UAAM,MAAM,aAAa,MAAM,OAAO;AACtC,UAAM,aAAa,CAAC,cAAc,WAAW,QAAQ;AACrD,QAAI,WAAW,SAAS,QAAQ,kBAAA,CAAmB,GAAG;AACpD,aAAO,MAAM,KAAK,KAAK,CAAC,MAAM,UAAU,CAAC,CAAC,EAAE,KAAK,EAAE;AAAA,IAAA;AAErD,WAAO;AAAA,EACT;AAEO,QAAM,cAAc,CAAC,SAAe;AACzC,UAAM,MAAM,aAAa,IAAI;AAC7B,UAAM,KAAK,WAAW,KAAK,KAAK,CAAC,MAAM,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;AACjE,WAAO,GAAG;AAAA,EACZ;AAEO,QAAM,cAAc,CAAC,SAAe;AACzC,UAAM,MAAM,aAAa,IAAI;AAC7B,UAAM,MAAM,IAAI;AAChB,UAAM,QAAQ,OAAO;AACrB,QAAI,SAAS;AACb,QAAI,SAAS,CAAA;AACb,OAAG;AACD,aAAO;AAAA,QACL,KAAK,MAAM,KAAK,IAAI,UAAU,QAAQ,SAAS,KAAK,GAAG,CAAC,MAAM,UAAU,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA,MAAA;AAEtF,gBAAU;AAAA,IAAA,SACH,SAAS;AAClB,WAAO,OAAO,KAAK,EAAE;AAAA,EACvB;AAMA,QAAA,QAAe;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,EACF;;;;;;;"}